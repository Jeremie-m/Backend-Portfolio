openapi: 3.0.0
info:
  title: Portfolio API
  description: API pour le portfolio personnel
  version: 1.0.0

servers:
  - url: http://localhost:3000/api
    description: Serveur de développement

components:
  schemas:
    Project:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        description:
          type: string
        technologies:
          type: string
        github_link:
          type: string
          format: uri
        demo_link:
          type: string
          format: uri
        category:
          type: string
        image_url:
          type: string
          format: uri
        created_at:
          type: string
          format: date-time
      required:
        - title

    BlogPost:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        content:
          type: string
        publication_date:
          type: string
          format: date-time
        tags:
          type: string
        meta_description:
          type: string
        image_url:
          type: string
          format: uri
      required:
        - title
        - content

    Technology:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        category:
          type: string
        description:
          type: string
        image_url:
          type: string
          format: uri
        created_at:
          type: string
          format: date-time
      required:
        - name

    LoginCredentials:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

paths:
  /projects:
    get:
      summary: Liste tous les projets
      responses:
        '200':
          description: Liste des projets récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Project'
    post:
      summary: Crée un nouveau projet
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '201':
          description: Projet créé avec succès

  /projects/{id}:
    get:
      summary: Récupère un projet spécifique
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Projet trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'
    put:
      summary: Met à jour un projet
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Project'
      responses:
        '200':
          description: Projet mis à jour avec succès
    delete:
      summary: Supprime un projet
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Projet supprimé avec succès

  /blog:
    get:
      summary: Liste tous les articles
      responses:
        '200':
          description: Liste des articles récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BlogPost'
    post:
      summary: Crée un nouvel article
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
      responses:
        '201':
          description: Article créé avec succès

  /blog/{id}:
    get:
      summary: Récupère un article spécifique
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Article trouvé
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlogPost'
    put:
      summary: Met à jour un article
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BlogPost'
      responses:
        '200':
          description: Article mis à jour avec succès
    delete:
      summary: Supprime un article
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Article supprimé avec succès

  /technologies:
    get:
      summary: Liste toutes les technologies
      responses:
        '200':
          description: Liste des technologies récupérée avec succès
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Technology'
    post:
      summary: Ajoute une nouvelle technologie
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Technology'
      responses:
        '201':
          description: Technologie ajoutée avec succès

  /technologies/{id}:
    get:
      summary: Récupère une technologie spécifique
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Technologie trouvée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Technology'
    put:
      summary: Met à jour une technologie
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Technology'
      responses:
        '200':
          description: Technologie mise à jour avec succès
    delete:
      summary: Supprime une technologie
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Technologie supprimée avec succès

  /auth/login:
    post:
      summary: Authentifie un utilisateur
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
      responses:
        '200':
          description: Authentification réussie
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string

  /auth/logout:
    post:
      summary: Déconnecte l'utilisateur
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Déconnexion réussie

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT 