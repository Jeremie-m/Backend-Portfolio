import { Injectable, OnModuleDestroy } from '@nestjs/common';
import Database from 'better-sqlite3';
import * as path from 'path';
import * as crypto from 'crypto';
import * as fs from 'fs';
import * as bcrypt from 'bcrypt';

interface CountResult {
  count: number;
}

@Injectable()
export class DatabaseService implements OnModuleDestroy {
  private db: Database.Database | null = null;

  constructor() {
    this.initializeDatabase();
  }

  async onModuleDestroy(): Promise<void> {
    if (this.db) {
      this.db.close();
    }
  }

  private initializeDatabase(): void {
    try {
      // Cr√©er le dossier data s'il n'existe pas
      const dataDir = path.join(process.cwd(), 'data');
      if (!fs.existsSync(dataDir)) {
        fs.mkdirSync(dataDir);
      }

      this.db = new Database(path.join(dataDir, 'portfolio.db'));
      
      // Activer les cl√©s √©trang√®res
      this.db.pragma('foreign_keys = ON');

      // Cr√©er la fonction UUID
      this.db.function('uuid', () => crypto.randomUUID());

      // Cr√©er les tables
      this.createTables();
      
      // Mettre √† jour les tables existantes si n√©cessaire
      this.updateTables();

      console.log('Base de donn√©es initialis√©e avec succ√®s');
    } catch (error) {
      console.error('Erreur lors de l\'initialisation de la base de donn√©es:', error);
      throw error;
    }
  }

  private createTables(): void {
    if (!this.db) return;

    // Cr√©ation de la table projects
    this.db.exec(`
      CREATE TABLE IF NOT EXISTS projects (
        id TEXT PRIMARY KEY,
        title TEXT NOT NULL UNIQUE,
        description TEXT,
        skills TEXT,
        github_link TEXT,
        demo_link TEXT,
        category TEXT,
        image_url TEXT,
        created_at TEXT NOT NULL
      )
    `);

    // Cr√©ation de la table skills
    this.db.exec(`
      CREATE TABLE IF NOT EXISTS skills (
        id TEXT PRIMARY KEY,
        name TEXT NOT NULL UNIQUE,
        category TEXT,
        description TEXT,
        image_url TEXT,
        created_at TEXT NOT NULL
      )
    `);

    // Cr√©ation de la table des utilisateurs
    this.db.exec(`
      CREATE TABLE IF NOT EXISTS users (
        id TEXT PRIMARY KEY DEFAULT (uuid()),
        email TEXT UNIQUE NOT NULL,
        password TEXT NOT NULL,
        role TEXT CHECK(role IN ('admin', 'user')) NOT NULL DEFAULT 'user',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // Cr√©ation de la table about_me
    this.db.exec(`
      CREATE TABLE IF NOT EXISTS about_me (
        id TEXT PRIMARY KEY,
        text TEXT NOT NULL,
        updated_at TEXT NOT NULL
      )
    `);

    // Cr√©ation de la table hero_banner_texts
    this.db.exec(`
      CREATE TABLE IF NOT EXISTS hero_banner_texts (
        id TEXT PRIMARY KEY DEFAULT (uuid()),
        text TEXT NOT NULL UNIQUE,
        is_active INTEGER NOT NULL DEFAULT 1,
        created_at TEXT NOT NULL
      )
    `);
  }

  private updateTables(): void {    
    if (!this.db) return;

    // Cr√©er un administrateur par d√©faut si aucun n'existe
    const adminCount = this.db.prepare('SELECT COUNT(*) as count FROM users WHERE role = ?').get('admin') as CountResult;
    
    if (adminCount.count === 0) {
      const adminEmail = process.env.ADMIN_EMAIL || 'admin@example.com';
      const adminPassword = process.env.ADMIN_PASSWORD || 'P@ssw0rd123!';
      const hashedPassword = bcrypt.hashSync(adminPassword, 12); // Augmentation du salt √† 12 pour plus de s√©curit√©
      
      this.db.prepare(`
        INSERT INTO users (id, email, password, role, created_at)
        VALUES (uuid(), ?, ?, 'admin', datetime('now'))
      `).run(adminEmail, hashedPassword);
      
      console.log('Utilisateur administrateur cr√©√© avec les identifiants par d√©faut');
    }

    // Initialisation des donn√©es "√Ä propos de moi" si aucune n'existe
    const aboutMeCount = this.db.prepare('SELECT COUNT(*) as count FROM about_me').get() as CountResult;
    
    if (aboutMeCount.count === 0) {
      const defaultAboutMeText = `Passionn√© par les nouvelles technologies, j'ai d√©but√© ma vie professionnelle en tant que technicien informatique, avant d'innover et de faire na√Ætre le premier bar eSport de Normandie, le WarpZone.

Cette exp√©rience unique et entrepreneuriale m'a appris √† jongler avec plusieurs casquettes et √† faire preuve d'une grande adaptation, et ce durant sept belles ann√©es.

Fort de cette aventure, j'ai d√©cid√© de quitter le monde de la nuit pour me r√©orienter vers le d√©veloppement web.

Aujourd'hui, en tant que d√©veloppeur full-stack junior, je me suis familiaris√© avec le front-end (HTML, CSS, Tailwind, React et Next.js) ainsi qu'avec le back-end (Node.js, Express, Nest.js, MongoDB, PostgreSQL).

Je peux aussi collaborer efficacement avec les √©quipes cr√©atives gr√¢ce √† mes comp√©tences en Photoshop et Figma.`;
      
      this.db.prepare(`
        INSERT INTO about_me (id, text, updated_at)
        VALUES (uuid(), ?, datetime('now'))
      `).run(defaultAboutMeText);
      
      console.log('Donn√©es "√Ä propos de moi" initialis√©es avec le texte par d√©faut');
    }

    // Initialisation des textes de la Hero Banner si aucun n'existe
    const heroBannerCount = this.db.prepare('SELECT COUNT(*) as count FROM hero_banner_texts').get() as CountResult;
    
    if (heroBannerCount.count === 0) {
      const defaultHeroBannerTexts = [
        { text: "D√©veloppeur Full-Stack", isActive: true },
        { text: "Pr√™t pour l'onboarding", isActive: true },
        { text: "Inscrit sur root-me.org üè¥‚Äç‚ò†Ô∏è", isActive: true },
        { text: "Papa Level 1", isActive: true },
        { text: "Ouvert aux opportunit√©s", isActive: true },
        { text: "Musicien autodidacte", isActive: true },
        { text: "En train d'apprendre une nouvelle comp√©tence", isActive: true },
        { text: "Auteur de mon propre blog", isActive: false },
        { text: "Le cr√©ateur du WarpZone Caen", isActive: true },
        { text: "Amateur de Geocaching", isActive: true }
      ];
      
      const insertStmt = this.db.prepare(`
        INSERT INTO hero_banner_texts (id, text, is_active, created_at)
        VALUES (uuid(), ?, ?, datetime('now'))
      `);
      
      defaultHeroBannerTexts.forEach(item => {
        insertStmt.run(item.text, item.isActive ? 1 : 0);
      });
      
      console.log('Textes de la Hero Banner initialis√©s avec les donn√©es par d√©faut');
    }
  }

  getDatabase(): Database.Database {
    if (!this.db) {
      throw new Error('La base de donn√©es n\'est pas initialis√©e');
    }
    return this.db;
  }
} 